@model IEnumerable<KalustoLuetteloSovellus.Models.Tapahtuma>

@{
    ViewData["Title"] = "Index";

    int currentPage = (int)ViewData["CurrentPage"];
    int totalPages = (int)ViewData["TotalPages"];
    int pageSize = (int)ViewData["PageSize"];
}


<h1>Tapahtumat</h1>

<h5 class="pb-4">Uuden tapahtuman luonti tuotteen kautta</h5>


<div class="d-flex gap-2">
    <form method="get" class="d-flex gap-2 mb-2" id="filterForm">
        <div class="form-group">
            <label>Status</label>
            <select name="statusId" class="form-control" asp-items="ViewBag.Statuses">
                <option value="">Kaikki</option>
            </select>
        </div>

        <div class="form-group">
            <label>Toimipiste</label>
            <select name="toimipisteId" class="form-control" asp-items="ViewBag.Toimipisteet">
                <option value="">Kaikki</option>
            </select>
        </div>

        <div class="form-group">
            <label>Tuote</label>
            <select name="tuoteId" class="form-control" asp-items="ViewBag.Tuotteet">
                <option value="">Kaikki</option>
            </select>
        </div>
        <button type="submit" class="btn btn-main mt-4"><i class="fas fa-filter"></i> Suodata</button>
    </form>
</div>

<div id="tapahtumat-container">
    <p>Ladataan tapahtumia...</p>
    <div class="skeleton-list">
        @for (int i = 0; i < 5; i++)
        {
            <div class="skeleton-item mb-3 p-3 rounded bg-light"></div>
        }
    </div>
</div>
<!-- Hidden totalPages value -->
<span id="totalPages" style="display:none;">@totalPages</span>

<!-- Pagination Buttons -->
<nav aria-label="Sivutus" class="mt-4">
    <ul class="pagination justify-content-start">
        <li class="page-item">
            <button class="page-link" id="prevPage">Edellinen</button>
        </li>

        @for (int i = 0; i < totalPages; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <button class="page-link page-number" data-page="@i">@(i + 1)</button>
            </li>
        }

        <li class="page-item">
            <button class="page-link" id="nextPage">Seuraava</button>
        </li>
    </ul>
</nav>


<script>
        document.addEventListener("DOMContentLoaded", function () {
        let currentPage = 0;
        const pageSize = parseInt('@ViewData["PageSize"]');
        const totalPages = parseInt('@ViewData["TotalPages"]');

        function loadPage(page) {
            const formData = new FormData(document.getElementById("filterForm"));
            const statusId = formData.get("statusId");
            const toimipisteId = formData.get("toimipisteId");
            const sortOrder = formData.get("sortOrder"); // Add this for sorting

            const url = `/Tapahtumat/GetTapahtumatPartial?pageSize=${pageSize}&currentPage=${page}&statusId=${statusId}&toimipisteId=${toimipisteId}&sortOrder=${sortOrder}`;

            fetch(url)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('tapahtumat-container').innerHTML = html;
                });
        }

        // Load the first page
        loadPage(currentPage);

        // Handle pagination button clicks
        document.getElementById('prevPage').addEventListener('click', function () {
            if (currentPage > 0) {
                currentPage--;
                updateActivePageButton();
                loadPage(currentPage);
            }
        });

        document.getElementById('nextPage').addEventListener('click', function () {
            if (currentPage < totalPages - 1) {
                currentPage++;
                updateActivePageButton();
                loadPage(currentPage);
            }
        });

            // Handle page number button clicks
        document.querySelectorAll('.page-number').forEach(button => {
            button.addEventListener('click', function () {
                currentPage = parseInt(button.getAttribute('data-page'));
                updateActivePageButton();
                loadPage(currentPage);
            });
        });

        // Update active pagination button
        function updateActivePageButton() {
            document.querySelectorAll('.page-item').forEach(li => li.classList.remove('active'));
            document.querySelector(`.page-number[data-page="${currentPage}"]`)?.closest('li')?.classList.add('active');
        }

        // Handle form submission for filtering
        document.getElementById('filterForm').addEventListener('submit', function (event) {
            event.preventDefault();
            loadPage(0); // Load the first page after applying the filter
        });
    });

</script>