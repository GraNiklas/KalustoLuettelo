@model IEnumerable<KalustoLuetteloSovellus.Models.Tapahtuma>

@{
    ViewData["Title"] = "Index";

    int currentPage = (int)ViewData["CurrentPage"];
    int totalPages = (int)ViewData["TotalPages"];
    int pageSize = (int)ViewData["PageSize"];
}


<h1>Tapahtumahistoria</h1>

<h5 class="pb-4">Uuden tapahtuman luonti tuotteen kautta</h5>

<div class="d-flex gap-2">
    <p>Kaikki tapahtumat: <strong>@ViewData["Kaikki"]</strong></p>
    <p>Näytetyt tapahtumat: <strong>@ViewData["Suodatetut"]</strong></p>
</div>

<div class="d-flex gap-2">
    <form method="get" class="d-flex gap-2 mb-2" id="filterForm">
        <div class="form-group">
            <label>Status</label>
            <select name="statusId" class="form-control" asp-items="ViewBag.Statuses">
                <option value="">Kaikki</option>
            </select>
        </div>

        <div class="form-group">
            <label>Toimipiste</label>
            <select name="toimipisteId" class="form-control" asp-items="ViewBag.Toimipisteet">
                <option value="">Kaikki</option>
            </select>
        </div>

        <div class="form-group">
            <label>Tuote</label>
            <select name="tuoteId" class="form-control" asp-items="ViewBag.Tuotteet">
                <option value="">Kaikki</option>
            </select>
        </div>
        <button type="submit" class="btn btn-main mt-4"><i class="fas fa-filter"></i> Suodata</button>
    </form>
</div>
@* <label> *@
@*     <input type="checkbox" id="colorToggle" /> *@
@*     Värikoodaus *@
@* </label> *@
<div id="tapahtumat-container">
    <p>Haetaan tapahtumia tietokannasta...</p>
    <div class="loading-container">
        <div class="loading"></div>
    </div>
</div>

<!-- Hidden totalPages value -->
<span id="totalPages" style="display:none;">@totalPages</span>

<!-- Pagination Buttons -->
<nav aria-label="Sivutus" class="mt-4">
    <ul class="pagination justify-content-start">
        <li class="page-item">
            <button class="page-link" id="prevPage">Edellinen</button>
        </li>

        @for (int i = 0; i < totalPages; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <button class="page-link page-number" data-page="@i">@(i + 1)</button>
            </li>
        }

        <li class="page-item">
            <button class="page-link" id="nextPage">Seuraava</button>
        </li>
    </ul>
</nav>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const container = document.getElementById('tapahtumat-container');
        const form = document.getElementById('filterForm');

        let currentPage = parseInt(@ViewData["CurrentPage"]);
        const pageSize = @ViewData["PageSize"];
        const totalPages = @ViewData["TotalPages"];
        let currentSortOrder = null;

        // Pagination
        function loadPage(page) {
            fetch(`/Tapahtumat/GetTapahtumatPartial?pageSize=${pageSize}&currentPage=${page}`)
                .then(response => response.text())
                .then(html => {
                    container.innerHTML = html;
                    currentPage = page;
                    updatePagination();
                    attachSortHandlers(); // Reattach sorting after pagination
                });
        }

        function updatePagination() {
            document.querySelectorAll('.page-item').forEach(el => el.classList.remove('active'));
            const pageButtons = document.querySelectorAll('.page-number');
            if (pageButtons[currentPage]) {
                pageButtons[currentPage].closest('li').classList.add('active');
            }
        }

        // Sorting and Filters
        function getFilterParams() {
            const formData = new FormData(form);
            return {
                statusId: formData.get("statusId"),
                toimipisteId: formData.get("toimipisteId"),
                tuoteId: formData.get("tuoteId")
            };
        }

        function loadTapahtumat({ sortOrder = null, page = currentPage } = {}) {
            const filters = getFilterParams();
            if (sortOrder !== null) currentSortOrder = sortOrder;

            const params = new URLSearchParams({
                pageSize,
                currentPage: page,
                ...filters
            });

            if (currentSortOrder) params.append("sortOrder", currentSortOrder);

            fetch(`/Tapahtumat/GetTapahtumatPartial?${params.toString()}`)
                .then(res => res.text())
                .then(html => {
                    container.innerHTML = html;
                    attachSortHandlers(); // Reattach after partial update
                });
        }

        // Attach sorting handlers to sort links
        function attachSortHandlers() {
            container.querySelectorAll('.sort-link').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const field = this.dataset.sort;
                    let sortOrder = field;

                    if (currentSortOrder === field) {
                        sortOrder = `${field}_desc`;
                        currentSortOrder = `${field}_desc`;
                    } else {
                        currentSortOrder = field;
                    }

                    loadTapahtumat({ sortOrder });
                });
            });
        }

        // Event listeners for pagination buttons
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 0) loadPage(currentPage - 1);
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage < totalPages - 1) loadPage(currentPage + 1);
        });

        // Filter form submission
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            loadTapahtumat(); // Uses currentSortOrder
        });

        // Initial load of the first page
        loadPage(currentPage);
    });
</script>

@* <script> *@
@*     document.addEventListener("DOMContentLoaded", () => { *@
@*         const checkbox = document.getElementById("colorToggle"); *@
@*         if (checkbox) { *@
@*             checkbox.addEventListener("change", () => { *@
@*                 // Call the function from the partial view *@
@*                 SetColorCoding(checkbox.checked); *@
@*             }); *@
@*             SetColorCoding(checkbox.checked);  // Run on page load if needed *@
@*         } *@
@*     }); *@
@* </script> *@