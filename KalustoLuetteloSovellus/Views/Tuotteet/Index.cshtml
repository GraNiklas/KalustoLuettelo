@model IEnumerable<KalustoLuetteloSovellus.Models.Tuote>

@{
    ViewData["Title"] = "Index";

    int currentPage = (int)ViewData["CurrentPage"];
    int totalPages = (int)ViewData["TotalPages"];
    int pageSize = (int)ViewData["PageSize"];
}


<h1>Tuotteet</h1>


@* Lisää uusi tuote linkki *@

<p>
    <a class="btn btn-main" asp-action="Create"><i class="fa fa-plus-circle"></i> Lisää uusi</a>
</p>



<form method="get" class="d-flex gap-2 mb-4">

    <div class="form-group">
        <label>Kuvaus</label>
        <input type="text" name="kuvausHakusanalla" class="form-control" value="@(Context.Request.Query["kuvausHakusanalla"])" placeholder="Etsi kuvauksesta..." />
    </div>


    <div class="form-group">
        <label>Kategoria</label>
        <select name="kategoriaId" class="form-control" asp-items="ViewBag.Kategoriat">
            <option value="">Kaikki kategoriat</option>
        </select>
    </div>

    <div class="form-group">
        <label>Aktiivisuus</label>
        <select name="onAktiivinen" class="form-control" asp-items="ViewBag.Aktiiviset">
            <option value="">Kaikki tilat</option>
        </select>
    </div>

    <div class="form-group">
        <label>Toimipiste</label>
        <select name="toimipisteId" class="form-control" asp-items="ViewBag.Toimipisteet">
            <option value="">Kaikki Toimipisteet</option>
        </select>
    </div>

    <div class="form-group align-self-end">
        <button type="submit" class="btn btn-main"><i class="fas fa-filter"></i> Suodata</button>
    </div>
</form>

<div id="tuotteet-container">
    <p>Haetaan tuotteita tietokannasta...</p>
    <div class="loading-container">
        <div class="loading"></div>
    </div>
</div>

<!-- Hidden totalPages value -->
<span id="totalPages" style="display:none;">@totalPages</span>

<!-- Pagination Buttons -->
<nav aria-label="Sivutus" class="mt-4">
    <ul class="pagination justify-content-start">
        <li class="page-item">
            <button class="page-link" id="prevPage">Edellinen</button>
        </li>

        @for (int i = 0; i < totalPages; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <button class="page-link page-number" data-page="@i">@(i + 1)</button>
            </li>
        }

        <li class="page-item">
            <button class="page-link" id="nextPage">Seuraava</button>
        </li>
    </ul>
</nav>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        let currentPage = parseInt('@ViewData["CurrentPage"]');
        const pageSize = parseInt('@ViewData["PageSize"]');
        let totalPages = parseInt('@ViewData["TotalPages"]');
        const form = document.querySelector('form');
        renderPagination();

        // Get filter parameters from the form
        function getFilterParams() {
            const formData = new FormData(form);
            return {
                kuvausHakusanalla: formData.get("kuvausHakusanalla"),
                toimipisteId: formData.get("toimipisteId"),
                kategoriaId: formData.get("kategoriaId"),
                onAktiivinen: formData.get("onAktiivinen")
            };
        }
        
        // Load tuotteet with optional filters and pagination
        function loadTuotteet({ page = currentPage, sortOrder = null } = {}) {
            const filters = getFilterParams();
            let params = new URLSearchParams({
                pageSize,
                currentPage: page,
                ...filters
            });

            if (sortOrder) {
                params.append("sortOrder", sortOrder);
            }

            fetch(`/Tuotteet/GetTuotteetPartial?${params.toString()}`)
                .then(res => {
                    totalPages = parseInt(res.headers.get("X-TotalPages"));
                    return res.text();
                })
                .then(html => {
                    document.getElementById('tuotteet-container').innerHTML = html;
                    currentPage = page;
                    renderPagination();
                });
        }

        // Update the pagination buttons' active state
        function updatePagination() {
            document.querySelectorAll('.page-item').forEach(el => el.classList.remove('active'));
            const pageButtons = document.querySelectorAll('.page-number');
            if (pageButtons[currentPage]) {
                pageButtons[currentPage].closest('li').classList.add('active');
            }
        }

        // Add click handlers to page number buttons
        function attachPaginationHandlers() {
            document.querySelectorAll('.page-number').forEach(btn => {
                btn.addEventListener('click', () => {
                    const page = parseInt(btn.getAttribute('data-page'));
                    loadTuotteet({ page });
                });
            });
        }

        // Previous page
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 0) loadTuotteet({ page: currentPage - 1 });
        });

        // Next page
        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage < totalPages - 1) loadTuotteet({ page: currentPage + 1 });
        });

        // Filter form submission
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            loadTuotteet({ page: 0 }); // Always reset to page 0 on filter
        });

        // Initial load
        loadTuotteet({ page: currentPage });
    
        function renderPagination() {
        const paginationContainer = document.querySelector(".pagination");
        let html = `
            <li class="page-item">
                <button class="page-link" id="prevPage">Edellinen</button>
            </li>
        `;

        for (let i = 0; i < totalPages; i++) {
            html += `
                <li class="page-item ${i === currentPage ? "active" : ""}">
                    <button class="page-link page-number" data-page="${i}">${i + 1}</button>
                </li>
            `;
        }

        html += `
            <li class="page-item">
                <button class="page-link" id="nextPage">Seuraava</button>
            </li>
        `;

        paginationContainer.innerHTML = html;

        // Reattach handlers
        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 0) loadTuotteet({ page: currentPage - 1 });
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            if (currentPage < totalPages - 1) loadTuotteet({ page: currentPage + 1 });
        });

        attachPaginationHandlers();
    }
    });




</script>
